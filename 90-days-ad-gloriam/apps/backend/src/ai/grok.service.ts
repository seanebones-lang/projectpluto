import { Injectable, HttpService } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';

@Injectable()
export class GrokService {
  private apiKey: string;
  private apiUrl: string = 'https://api.grok.xai.com/v1/chat/completions';
  
  // ELCA Lutheran theological context for AI
  private readonly elcaSystemPrompt = `You are a spiritual companion for the Evangelical Lutheran Church in America (ELCA). 
Your responses are grounded in Lutheran theology emphasizing:
- Grace alone (Sola Gratia): God's unconditional love and forgiveness
- Faith alone (Sola Fide): Trust in Christ's redemptive work
- Scripture alone (Sola Scriptura): Biblical foundation for all guidance
- Priesthood of all believers: Every Christian called to service and vocation
- Social justice: ELCA's commitment to peace, justice, and care for creation

Always be encouraging, never judgmental. Root reflections in Scripture. 
Promote community, service, and spiritual growth. Be transparent about AI limitations.`;

  constructor(private httpService: HttpService, private configService: ConfigService) {
    this.apiKey = this.configService.get('GROK_API_KEY');
  }

  async generateReflection(prompt: string, context?: {
    journeyStage?: string;
    recentJournals?: string[];
    prayerConcerns?: string[];
  }): Promise<string> {
    if (this.hasBiasRisk(prompt)) {
      throw new Error('Prompt contains potential bias risks; review required.');
    }

    const enrichedPrompt = this.buildLutheranPrompt(prompt, context);

    const response = await this.httpService.post(this.apiUrl, {
      model: 'grok-4',
      messages: [
        { role: 'system', content: this.elcaSystemPrompt },
        { role: 'user', content: enrichedPrompt }
      ],
      max_tokens: 500,
      temperature: 0.7,
    }, {
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
    }).toPromise();

    const reflection = response.data.choices[0].message.content;
    return `${reflection}\n\n---\nAI Transparency: Generated by Grok-4 with ELCA Lutheran theological context. This reflection is meant to supplement, not replace, pastoral care and community worship.`;
  }

  async generateDailyDevotion(lectionary: {
    readings: string[];
    date: Date;
  }): Promise<string> {
    const prompt = `Based on today's Revised Common Lectionary readings (${lectionary.readings.join(', ')}), 
provide a brief Lutheran devotion (200-300 words) that:
1. Reflects on the Scripture passages
2. Connects to daily life and vocation
3. Includes a prayer
4. Encourages service to neighbor`;

    return this.generateReflection(prompt);
  }

  async generatePrayerGuidance(concerns: string[]): Promise<string> {
    const prompt = `Create a Lutheran-style intercessory prayer addressing these concerns: ${concerns.join(', ')}. 
Include thanksgiving, petition, and commitment to action. Keep it personal and hopeful.`;

    return this.generateReflection(prompt);
  }

  async matchMentor(userProfile: {
    journeyStage: string;
    interests: string[];
    location: string;
  }): Promise<any> {
    // AI-powered mentor matching based on spiritual journey stage
    const prompt = `Suggest mentor characteristics for an ELCA member at "${userProfile.journeyStage}" stage, 
interested in ${userProfile.interests.join(', ')}, located in ${userProfile.location}. 
Consider Lutheran spiritual direction practices.`;

    const response = await this.generateReflection(prompt);
    
    // In production, this would query a database of ELCA spiritual directors
    return {
      recommendations: response,
      suggestedQualities: ['Active listener', 'Grounded in Scripture', 'Service-oriented'],
    };
  }

  private buildLutheranPrompt(basePrompt: string, context?: any): string {
    let enriched = basePrompt;
    
    if (context?.journeyStage) {
      enriched += `\n\nUser's spiritual journey stage: ${context.journeyStage}`;
    }
    
    if (context?.recentJournals?.length) {
      enriched += `\n\nRecent journal themes: ${context.recentJournals.join(', ')}`;
    }
    
    if (context?.prayerConcerns?.length) {
      enriched += `\n\nCurrent prayer concerns: ${context.prayerConcerns.join(', ')}`;
    }
    
    return enriched;
  }

  private hasBiasRisk(prompt: string): boolean {
    const riskyKeywords = ['discriminatory', 'biased', 'hate', 'violence'];
    return riskyKeywords.some(keyword => prompt.toLowerCase().includes(keyword));
  }
}
